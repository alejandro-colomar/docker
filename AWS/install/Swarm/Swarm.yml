---

AWSTemplateFormatVersion: "2010-09-09"

Description: This template creates a new VPC and deploys Docker Swarm.

#============================================================
# UI Definition
#============================================================
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Network Configuration
        Parameters:
          - VPCCidrBlock
          - SubnetCidrBlockPrivate1
          - SubnetCidrBlockPrivate2
          - SubnetCidrBlockPrivate3
          - SubnetCidrBlockPublic1
          - SubnetCidrBlockPublic2
          - SubnetCidrBlockPublic3
          - SecurityGroupCidrIpWorker
      -
        Label:
          default: Swarm Manager Configuration
        Parameters:
          - InstanceManagerInstanceType
          - InstanceManagerImageId
      -
        Label:
          default: Swarm Worker Configuration
        Parameteres:
          - InstanceWorkerInstanceType
          - InstanceWorkerImageId
          
    ParameterLabels:
      SubnetCidrBlockPrivate1:
        default: Private Subnet 1 CIDR
      SubnetCidrBlockPrivate2:
        default: Private Subnet 2 CIDR
      SubnetCidrBlockPrivate3:
        default: Private Subnet 3 CIDR
      SubnetCidrBlockPublic1:
        default: Public Subnet 1 CIDR
      SubnetCidrBlockPublic2:
        default: Public Subnet 2 CIDR
      SubnetCidrBlockPublic3:
        default: Public Subnet 3 CIDR
      SecurityGroupCidrIpWorker:
        default: Allowed CIDR for ALB Swarm Worker Access
      VPCCidrBlock:
        default: VPC CIDR
      InstanceManagerInstanceType:
        default: Swarm Manager Instance Size
      InstanceWorkerInstanceType:
        default: Swarm Worker Instance Size
      InstanceManagerImageId:
        default: AMI to use for Swarm Manager Instances
      InstanceWorkerImageId:
        default: AMI to use for Swarm Worker Instances 
                
Parameters:

  SubnetCidrBlockPrivate1:
    Type: String
    Description: >
      CIDR block for private subnet located in Availability Zone 1. 
      All resources located on this subnet are provided an IP within this address block. 
    Default: 192.168.1.0/24
    
  SubnetCidrBlockPrivate2:
    Type: String
    Description: >
      CIDR block for private subnet located in Availability Zone 2. 
      All resources located on this subnet are provided an IP within this address block. 
    Default: 192.168.3.0/24
    
  SubnetCidrBlockPrivate3:
    Type: String
    Description: >
      CIDR block for private subnet located in Availability Zone 3. 
      All resources located on this subnet are provided an IP within this address block. 
    Default: 192.168.5.0/24
    
  SubnetCidrBlockPublic1:
    Type: String
    Description: >
      CIDR block for public (DMZ) subnet located in Availability Zone 1. 
      All resources located on this subnet are provided an IP within this address block. 
    Default: 192.168.2.0/24
    
  SubnetCidrBlockPublic2:
    Type: String
    Description: >
      CIDR block for public (DMZ) subnet located in Availability Zone 2. 
      All resources located on this subnet are provided an IP within this address block. 
    Default: 192.168.4.0/24
    
  SubnetCidrBlockPublic3:
    Type: String
    Description: >
      CIDR block for public (DMZ) subnet located in Availability Zone 3. 
      All resources located on this subnet are provided an IP within this address block. 
    Default: 192.168.6.0/24
    
  SecurityGroupCidrIpWorker:
    Type: String
    Description: >
      Allowed CIDR block for external web access to the Swarm Worker Load Balancer. 
      It defines the block of IPs that can access the Swarm Worker Load Balancer and, consequently, the application servers. 
      Set it to 0.0.0.0/0 to make it accessible from anywhere.
    Default: 0.0.0.0/0
    
  VPCCidrBlock:
    Type: String
    Description: >
      CIDR block for the VPC. All the subnets and resources will have an IP within this address block.
    Default: 192.168.0.0/16
    
  InstanceManagerInstanceType:
    Type: String
    Description: >
      Select Amazon EC2 instance type for the Swarm Manager instances.
    Default: t3a.nano
    ConstraintDescription: >
      Choose an instance type.
    AllowedValues:
      - t2.nano
      - t2.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3a.nano
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
    
  InstanceWorkerInstanceType:
    Type: String
    Description: >
      Select Amazon EC2 instance type for the Swarm Worker instances.
    Default: t3a.micro
    ConstraintDescription: >
      Choose an instance type.
    AllowedValues:
      - t2.nano
      - t2.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3a.nano
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
    
  InstanceManagerImageId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Description: >
      Select AMI to use for the Swarm Manager instances. 
      When it's left blank, the default AMI for your AWS region will be used. 
      When setting an AMI, it must be available in your current region.
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    
  InstanceWorkerImageId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Description: >
      Select AMI to use for the Swarm Worker instances. 
      When it's left blank, the default AMI for your AWS region will be used. 
      When setting an AMI, it must be available in your current region.
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

#============================================================
# Resources
#============================================================
Resources:

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCCidrBlock

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RoutePublic:
    Type: AWS::EC2::Route
    DependsOn: [VPCGatewayAttachment]
    Properties:
      RouteTableId: !Ref RouteTablePublic
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  SubnetPublic1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPublic1
      VpcId: !Ref VPC

  SubnetRouteTableAssociationPublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublic1

  SubnetPrivate1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPrivate1
      VpcId: !Ref VPC

  RouteTablePrivate1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  SubnetRouteTableAssociationPrivate1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate1
      SubnetId: !Ref SubnetPrivate1

  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref SubnetPublic1

  RoutePrivate1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate1
      NatGatewayId: !Ref NatGateway1
      DestinationCidrBlock: 0.0.0.0/0

  SubnetPublic2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPublic2
      VpcId: !Ref VPC

  SubnetRouteTableAssociationPublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublic2

  SubnetPrivate2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPrivate2
      VpcId: !Ref VPC

  RouteTablePrivate2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  SubnetRouteTableAssociationPrivate2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate2
      SubnetId: !Ref SubnetPrivate2

  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      SubnetId: !Ref SubnetPublic2

  RoutePrivate2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate2
      NatGatewayId: !Ref NatGateway2
      DestinationCidrBlock: 0.0.0.0/0

  SubnetPublic3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPublic3
      VpcId: !Ref VPC

  SubnetRouteTableAssociationPublic3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublic3

  SubnetPrivate3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPrivate3
      VpcId: !Ref VPC

  RouteTablePrivate3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  SubnetRouteTableAssociationPrivate3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate3
      SubnetId: !Ref SubnetPrivate3

  EIP3:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway3:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt EIP3.AllocationId
      SubnetId: !Ref SubnetPublic3

  RoutePrivate3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate3
      NatGatewayId: !Ref NatGateway3
      DestinationCidrBlock: 0.0.0.0/0

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref Role]

  InstanceManager1:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceManagerImageId
      InstanceType: !Ref InstanceManagerInstanceType
      SubnetId: !Ref SubnetPrivate1
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            # Swarm LEADER
            sudo yum install -y git && git clone https://github.com/secobau/docker.git && chmod +x docker/AWS/install/Swarm/leader.sh && ./docker/AWS/install/Swarm/leader.sh && rm -rf docker
            # AWS SYSTEMS MANAGER
            cd /tmp && curl https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o amazon-ssm-agent.rpm && sudo yum install -y amazon-ssm-agent.rpm
            
  InstanceManager2:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceManagerImageId
      InstanceType: !Ref InstanceManagerInstanceType
      SubnetId: !Ref SubnetPrivate2
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            # Swarm MANAGER
            sudo yum install -y git && git clone https://github.com/secobau/docker.git && chmod +x docker/AWS/install/node.sh && ./docker/AWS/install/node.sh && rm -rf docker
            # AWS SYSTEMS MANAGER
            cd /tmp && curl https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o amazon-ssm-agent.rpm && sudo yum install -y amazon-ssm-agent.rpm

  InstanceManager3:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceManagerImageId
      InstanceType: !Ref InstanceManagerInstanceType
      SubnetId: !Ref SubnetPrivate3
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            # Swarm MANAGER
            sudo yum install -y git && git clone https://github.com/secobau/docker.git && chmod +x docker/AWS/install/node.sh && ./docker/AWS/install/node.sh && rm -rf docker
            # AWS SYSTEMS MANAGER
            cd /tmp && curl https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o amazon-ssm-agent.rpm && sudo yum install -y amazon-ssm-agent.rpm

  InstanceWorker1:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceWorkerImageId
      InstanceType: !Ref InstanceWorkerInstanceType
      SubnetId: !Ref SubnetPrivate1
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            # Swarm WORKER
            sudo yum install -y git && git clone https://github.com/secobau/docker.git && chmod +x docker/AWS/install/node.sh && ./docker/AWS/install/node.sh && rm -rf docker
            # AWS SYSTEMS MANAGER
            cd /tmp && curl https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o amazon-ssm-agent.rpm && sudo yum install -y amazon-ssm-agent.rpm

  InstanceWorker2:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceWorkerImageId
      InstanceType: !Ref InstanceWorkerInstanceType
      SubnetId: !Ref SubnetPrivate2
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            # Swarm WORKER
            sudo yum install -y git && git clone https://github.com/secobau/docker.git && chmod +x docker/AWS/install/node.sh && ./docker/AWS/install/node.sh && rm -rf docker
            # AWS SYSTEMS MANAGER
            cd /tmp && curl https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o amazon-ssm-agent.rpm && sudo yum install -y amazon-ssm-agent.rpm

  InstanceWorker3:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceWorkerImageId
      InstanceType: !Ref InstanceWorkerInstanceType
      SubnetId: !Ref SubnetPrivate3
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            # Swarm WORKER
            sudo yum install -y git && git clone https://github.com/secobau/docker.git && chmod +x docker/AWS/install/node.sh && ./docker/AWS/install/node.sh && rm -rf docker
            # AWS SYSTEMS MANAGER
            cd /tmp && curl https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o amazon-ssm-agent.rpm && sudo yum install -y amazon-ssm-agent.rpm

  SecurityGroupWorker:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to the applications running on the cluster of workers
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref SecurityGroupCidrIpWorker
      
  LoadBalancerWorker1:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      SecurityGroups:
        - !Ref SecurityGroupWorker
        - !GetAtt VPC.DefaultSecurityGroup
      Subnets: 
        - !Ref SubnetPublic1
        - !Ref SubnetPublic2
        - !Ref SubnetPublic3
        
  TargetGroupWorker1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckPath: /
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      Port: 8080
      Protocol: HTTP
      Targets: 
        -   Id: !Ref InstanceWorker1
        -   Id: !Ref InstanceWorker2
        -   Id: !Ref InstanceWorker3
      TargetType: instance
      VpcId: !Ref VPC

  ListenerWorker1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroupWorker1
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerWorker1
      Port: 80
      Protocol: HTTP
 
  LoadBalancerWorker2:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      SecurityGroups:
        - !Ref SecurityGroupWorker
        - !GetAtt VPC.DefaultSecurityGroup
      Subnets: 
        - !Ref SubnetPublic1
        - !Ref SubnetPublic2
        - !Ref SubnetPublic3
        
  TargetGroupWorker2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckPath: /
      HealthCheckPort: 8888
      HealthCheckProtocol: HTTP
      Port: 8888
      Protocol: HTTP
      Targets: 
        -   Id: !Ref InstanceWorker1
        -   Id: !Ref InstanceWorker2
        -   Id: !Ref InstanceWorker3
      TargetType: instance
      VpcId: !Ref VPC

  ListenerWorker2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroupWorker2
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerWorker2
      Port: 80
      Protocol: HTTP
